insert into profile
values (uuid(), 'install-centos.ipxe',
        'echo Starting CentOS/RHEL <%=version%> installer for $\{hostidentifier\}\n\n# The progress notification is just something nice-to-have, so progress notification failure should\n# never impact the normal installation process\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.enterProfileUri ) \{ %>\n    # since there is no curl like http client in ipxe, so use imgfetch instead\n    # note: the progress milestones uri must be wrapped in unescaped format, otherwise imgfetch will fail\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.enterProfileUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nset base-url <%=repo%>/images/pxeboot\nset params initrd=initrd.img ks=<%=installScriptUri%> hostname=<%=hostname%> ksdevice=bootif BOOTIF=01-$\{netX/mac\} console=<%=comport%>,115200n8 console=tty0\nkernel $\{base-url\}/vmlinuz repo=<%=repo%> $\{params\}\ninitrd $\{base-url\}/initrd.img\n\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.startInstallerUri ) \{ %>\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.startInstallerUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nboot || prompt --key 0x197e --timeout 2000 Press F12 to investigate || exit shell\n\n',
        'system', 1629698788504, 1629698788504);

insert into profile
values (uuid(), 'install-debian.ipxe',
        '# Copyright 2017, Dell EMC, Inc.\necho Starting Debian/Ubuntu x64 installer for $\{hostidentifier\}\n\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.enterProfileUri ) { %>\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.enterProfileUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nset base-url <%=repo%>/<%=baseUrl%>\nkernel $\{base-url\}/linux\ninitrd $\{base-url\}/initrd.gz\nimgargs linux initrd=initrd.gz auto=true nomodeset fb=false DEBIAN_FRONTEND=noninteractive url=<%=installScriptUri%> hostname=<%=hostname%> log_host=<%=server%> BOOTIF=01-<%=macaddress%> interface=<%=interface%> console=<%=comport%>,115200n8 console=tty0 raid=noautodetect <%=kargs%>\n\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.startInstallerUri ) { %>\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.startInstallerUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nboot || prompt --key 0x197e --timeout 2000 Press F12 to investigate || exit shell\n\n',
        'system', 1629698788504, 1629698788504);

insert into profile
values (uuid(), 'install-ubuntu-livecd.ipxe',
        '# Copyright 2021, FIT2CLOUD RackShift.\necho Starting Ubuntu x64 20.04 Live Server installer for  $\{hostidentifier\}\n\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.enterProfileUri ) { %>\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.enterProfileUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nset base-url <%=repo%>/casper\ninitrd $\{base-url\}/initrd\nkernel $\{base-url\}/vmlinuz initrd=initrd autoinstall net.ifnames=0 biosdevname=0 ip=dhcp ipv6.disable=1 ds=nocloud-net;s=http://<%=server%>:<%=port%>/api/current/templates/nocloud/<%=macaddress%>/ url=<%=isoUrl%>\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.startInstallerUri ) { %>\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.startInstallerUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nboot || prompt --key 0x197e --timeout 2000 Press F12 to investigate || exit shell',
        'system', 1629698788504, 1629698788504);

insert into profile
values (uuid(), 'install-esx.ipxe',
        '# The progress notification is just something nice-to-have, so progress notification failure should\n# never impact the normal installation process\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.enterProfileUri ) { %>\n    # since there is no curl like http client in ipxe, so use imgfetch instead\n    # note: the progress milestones uri must be wrapped in unescaped format, otherwise imgfetch will fail\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.enterProfileUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\niseq $\{platform\} efi && goto is_efi || goto not_efi\n\n:not_efi\nkernel <%=repo%>/<%=mbootFile%> -c <%=esxBootConfigTemplateUri%> BOOTIF=01-$\{netX/mac\}\ngoto boot_img\n\n:is_efi\nkernel <%=repo%>/efi/boot/bootx64.efi -c <%=esxBootConfigTemplateUri%>\ngoto boot_img\n\n:boot_img\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.startInstallerUri ) { %>\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.startInstallerUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nboot\n',
        'system', 1629698788504, 1629698788504);

insert into profile
values (uuid(), 'windows.ipxe',
        '# The progress notification is just something nice-to-have, so progress notification failure should\n# never impact the normal installation process\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.enterProfileUri ) { %>\n    # since there is no curl like http client in ipxe, so use imgfetch instead\n    # note: the progress milestones uri must be wrapped in unescaped format, otherwise imgfetch will fail\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.enterProfileUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\ncpuid --ext 29 && set arch amd64 || set arch x86\nset base-url <%=repo%>\nkernel $\{base-url\}/wimboot\ninitrd $\{base-url\}/bootmgr                      bootmgr\ninitrd $\{base-url\}/Boot/BCD                     BCD\ninitrd $\{base-url\}/Boot/Fonts/segmono_boot.ttf  segmono_boot.ttf\ninitrd $\{base-url\}/Boot/Fonts/segoe_slboot.ttf  segoe_slboot.ttf\ninitrd $\{base-url\}/Boot/Fonts/segoen_slboot.ttf segoen_slboot.ttf\ninitrd $\{base-url\}/Boot/Fonts/wgl4_boot.ttf     wgl4_boot.ttf\ninitrd $\{base-url\}/Boot/boot.sdi                boot.sdi\ninitrd $\{base-url\}/amd64/media/sources/boot.wim          boot.wim\n\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.startInstallerUri ) { %>\n    imgfetch --name fakedimage http://<%=server%>:<%=port%><%-progressMilestones.startInstallerUri%> ||\n    imgfree fakedimage ||\n<% \} %>\n\nboot\n\n',
        'system', 1629698788504, 1629698788504);


insert into template
values (uuid(), 'centos-ks',
        '# Copyright 2016-2018, DELL EMC, Inc.\ninstall\n#text\ngraphical\nunsupported_hardware\nurl --url=<%=repo%>\n# eula --agreed\nlang en_US.UTF-8\nkeyboard ''us''\ntimezone America/Los_Angeles --isUtc\nfirewall --enabled --http --ssh\nselinux --permissive\n<% if (version === \"6.5\") \{ %>\n  bootloader --location=mbr --driveorder=<%=installDisk%> --append=\"crashkernel=auth rhgb\"\n<% \} else \{ %>\n  bootloader --location=mbr --driveorder=<%=installDisk%> --boot-drive=<%=installDisk%> --append=\"crashkernel=auth rhgb\"\n<% \} %>\nservices --enabled=NetworkManager,sshd\n#network --device=<%=macaddress%> --noipv6 --activate\n\n# enable syslog\n<% if (typeof remoteLogging !== \'undefined\' && remoteLogging) \{ %>\n  logging --host=<%=server%> --level=info\n<% \} %>\n\nauthconfig --enableshadow --passalgo=sha512 --enablefingerprint\n\n#Set the root account\nrootpw --iscrypted <%-rootEncryptedPassword%>\n\n#create all users\n<% if (typeof users !== \'undefined\') \{ %>\n<% users.forEach(function(user) \{ %>\n<%_  if( typeof user.uid !== \'undefined\' ) \{ _%>\n        user --name=<%=user.name%> --uid=<%=user.uid%> --iscrypted --password <%-user.encryptedPassword%>\n<%_  \} else \{ _%>\n        user --name=<%=user.name%>  --iscrypted --password <%-user.encryptedPassword%>\n<%_ \}\}) _%>\n<% \} %>\n\n# Disk Partitioning\nzerombr\nclearpart --all --drives=<%=installDisk%>\n\n<% exist = false;%>\n\n<% if (typeof installPartitions !== \'undefined\' && installPartitions.length > 0) \{ %>\n    <% installPartitions.forEach(function(partition) \{ %>\n     <% if(partition.deviceType === ''lvm'')\{ %>\n    <% exist = true;%>\n    <%\}%>\n    <%\})%>\n<%\}%>\n\n<% if (exist) \{%>\n # Create an LVM partition on sda\n                    part pv.01 --size=1 --ondisk=sda --grow --asprimary\n                    volgroup rootvg --pesize=4096 pv.01\n<%\}%>\n\n\n<% if (typeof installPartitions !== \'undefined\' && installPartitions.length > 0) \{ %>\n    <% installPartitions.forEach(function(partition) \{ %>\n        # mountPoint and size is required\n        <% if(partition.mountPoint !== undefined && partition.size !== undefined) \{ %>\n            \n            # lvm support\n            <% if(partition.deviceType === ''standard'' || partition.deviceType === undefined)\{ %>\n\n              <% if(partition.fsType !== undefined) \{ %>\n                <% if(partition.size === ''auto'') \{ %>\n                    partition <%=partition.mountPoint%> --size=250 --grow --fstype=<%=partition.fsType%>\n                <% \} else \{ %>\n                    partition <%=partition.mountPoint%> --size=<%=partition.size%> --fstype=<%=partition.fsType%>\n                <% \} %>\n                <% \} else \{ %>\n                # fsType is optional\n                <% if(partition.size === ''auto'') \{ %>\n                    partition <%=partition.mountPoint%> --size=250 --grow\n                <% \} else \{ %>\n                    partition <%=partition.mountPoint%> --size=<%=partition.size%>\n                <% \} %>\n              <% \} %>\n\n            <% \} else \{%>\n                    # Create an LVM partition on sda\n                    #part pv.01 --size=1 --ondisk=sda --grow --asprimary\n                    #volgroup rootvg --pesize=4096 pv.01\n\n               <% if(partition.fsType !== undefined) \{ %>\n                <% if(partition.size === ''auto'') \{ %>\n                    logvol <%=partition.mountPoint%> --size=250 --grow --fstype=<%=partition.fsType%> --vgname=\"rootvg\" --name=<%=partition.lvmName%> \n                <% \} else \{ %>\n                    logvol <%=partition.mountPoint%> --size=<%=partition.size%> --fstype=<%=partition.fsType%> --vgname=\"rootvg\" --name=<%=partition.lvmName%> \n                <% \} %>\n                <% \} else \{ %>\n                # fsType is optional\n                <% if(partition.size === ''auto'') \{ %>\n                    logvol <%=partition.mountPoint%> --size=250 --grow --vgname=\"rootvg\" --name=<%=partition.lvmName%> \n                <% \} else \{ %>\n                    logvol <%=partition.mountPoint%> --size=<%=partition.size%> --vgname=\"rootvg\" --name=<%=partition.lvmName%>\n                <% \} %>\n              <% \} %>\n            \n            <% \} %>\n\n\n        <% \} %>\n    <% \}) %>\n<% \} else \{ %>\n    # auto partitioning if no partitions are specified\n    autopart\n<% \} %>\n\n# END of Disk Partitioning\n\n# Make sure we reboot into the new system when we are finished\nreboot\n\n# Package Selection\n%packages --nobase --excludedocs\n@core\n-*firmware\n-iscsi*\n-fcoe*\n-b43-openfwwf\nkernel-firmware\nwget\nsudo\nperl\nlibselinux-python\nnet-tools\n\n<% if( typeof kvm !== \'undefined\' && kvm ) \{ %>\n    <% if (version === \"6.5\") \{ %>\n        kvm\n        virt-manager\n        libvirt\n        libvirt-python\n        python-virtinst\n    <% \} else \{ %>\n        @virtualization-hypervisor\n        @virtualization-client\n        @virtualization-platform\n        @virtualization-tools\n    <% \} %>\n<% \} %>\n\n<% if (typeof packages !== \'undefined\') \{ %>\n<%   for (var i = 0, len = packages.length; i < len; i++) \{ %>\n<%= packages[i] %>\n<%   \} %>\n<% \} %>\n%end\n\n%pre\n# The progress notification is just something nice-to-have, so progress notification failure should\n# never impact the normal installation process\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.preConfigUri ) \{ %>\n    # the url may contain query, the symbol ''&'' will mess the command line logic, so the whole url need be wrapped in quotation marks\n    /usr/bin/curl -X POST -H ''Content-Type:application/json'' \"http://<%=server%>:<%=port%><%-progressMilestones.preConfigUri%>\" || true\n<% \} %>\n\n%end\n\n%post --log=/root/install-post.log\n(\n#notify the current progress\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.postConfigUri ) \{ %>\n    echo \"RackHD POST script started - curl notify post progress\"\n    # the url may contain query, the symbol ''&'' will mess the command line logic, so the whole url need be wrapped in quotation marks\n    /usr/bin/curl -X POST -H ''Content-Type:application/json'' \"http://<%=server%>:<%=port%><%-progressMilestones.postConfigUri%>\" || true\n    echo \"RackHD POST script started - curl notify post progress after\"\n<% \} %>\n\n# PLACE YOUR POST DIRECTIVES HERE\nPATH=/bin:/sbin:/usr/bin:/usr/sbin\nexport PATH\n\n# copying of SSH key\n<% if (typeof rootSshKey !== \'undefined\') \{ %>\n    mkdir /root/.ssh\n    echo <%=rootSshKey%> > /root/.ssh/authorized_keys\n    chown -R root:root /root/.ssh\n<% \} %>\n<% if (typeof users !== \'undefined\') \{ %>\n<% users.forEach(function(user) \{ %>\n    <% if (typeof user.sshKey !== \'undefined\') \{ %>\n        mkdir /home/<%=user.name%>/.ssh\n        echo <%=user.sshKey%> > /home/<%=user.name%>/.ssh/authorized_keys\n        chown -R <%=user.name%>:<%=user.name%> /home/<%=user.name%>/.ssh\n    <% \} %>\n<% \}) %>\n<% \} %>\n\n#set hostname\n<% if (typeof hostname !== \'undefined\') \{ %>\n    echo <%=hostname%> > /etc/hostname\n    <% if (typeof domain !== \'undefined\') \{ %>\n        echo -e \"NETWORKING=yes\\nHOSTNAME=<%=hostname%>.<%=domain%>\" > /etc/sysconfig/network\n    <% \} %>\n<% \} %>\n\n# Setup BOND Configuration\n<% if (typeof bonds !== \'undefined\') \{ %> \n\n<% bonds.forEach(function(n) \{ %>\n     echo \"Configuring bond <%=n.name%>\"\n     <% var bondname = n.name %>\n     echo DEVICE=<%=bondname%> > /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo NAME=<%=bondname%> >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo TYPE=bond  >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo BONDING_MASTER=yes >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo BONDING_OPTS=\"mode=802.3ad miimon=10 lacp_rate=1\"  >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo USERCTL=no >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo NM_CONTROLLED=no >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo BOOTPROTO=none >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo ONBOOT=yes >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     <% if ( typeof n.ipv4 != \'undefined\' ) \{ %>\n          echo IPADDR=\"<%=n.ipv4.ipAddr%>\" >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n          echo NETMASK=\"<%=n.ipv4.netmask%>\" >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n          <% if ( undefined != n.ipv4.gateway) \{ %>\n               echo GATEWAY=\"<%=n.ipv4.gateway%>\" >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n          <% \} %>\n          echo DEFROUTE=yes >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n          echo PEERDNS=yes >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     <% \} %>\n\n     echo IPV4_FAILURE_FATAL=\"no\" >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     echo IPV6INIT=\"no\" >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>\n     <% if (typeof n.nics !== \'undefined\') \{ %>\n      <%   for (var i = 0, len = n.nics.length; i < len; i++) \{ %>\n        interface=`grep -i /sys/class/net/*/address -e  <%=n.nics[i]%> | cut -d \"/\" -f 5`\n        echo DEVICE=$interface > /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo NAME=<%=bondname%>-slave >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo MASTER=<%=bondname%> >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo TYPE=Ethernet >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo BOOTPROTO=none >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo ONBOOT=yes >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo NM_CONTROLLED=no >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo SLAVE=yes >> /etc/sysconfig/network-scripts/ifcfg-$interface\n      <%   \} %>\n      <% \} %>\n\n      # Bonded VLAN Interface\n      <% if ( typeof n.bondvlaninterfaces != \'undefined\' ) \{ %>\n         <%   for (var i = 0, len = n.bondvlaninterfaces.length; i < len; i++) \{ %>\n         echo DEVICE=<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>  > /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         echo NAME=<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%> >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         echo BOOTPROTO=none >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         echo ONPARENT=yes >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         echo IPADDR=<%=n.bondvlaninterfaces[i].ipv4.ipAddr%> >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         echo NETMASK=<%=n.bondvlaninterfaces[i].ipv4.netmask%> >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         <% if ( undefined != n.bondvlaninterfaces[i].ipv4.gateway) \{ %>\n            echo GATEWAY=<%=n.bondvlaninterfaces[i].ipv4.gateway%> >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         <% \} %>\n         echo VLAN=yes >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         echo NM_CONTROLLED=no >> /etc/sysconfig/network-scripts/ifcfg-<%=n.name%>.<%=n.bondvlaninterfaces[i].vlanid%>\n         <%   \} %>\n       <% \} %>\n  <%\}) %>\n  \n  systemctl stop NetworkManager\n  systemctl disable NetworkManager\n  modprobe --first-time bonding\n  systemctl restart network\n<%\} %>\n\n# Setup static network configuration\n<%_ var macRegex = /(..:*)\{6\}/i; _%>\n<% if (typeof networkDevices !== \'undefined\') \{ %>\n  <% ipv6 = 0 %>\n  <% networkDevices.forEach(function(n) \{ %>\n    interface=<%=n.device%>\n    <%_ if (n.device.search(macRegex) === 0)\{ _%>\n      interface=`grep -i /sys/class/net/*/address -e  $interface | cut -d \"/\" -f 5`\n    <%_ \} _%>\n    <% if( undefined != n.ipv4 ) \{ %>\n      <% if( undefined != n.ipv4.vlanIds ) \{ %>\n        <% n.ipv4.vlanIds.forEach(function(vid) \{ %>\n          echo \"Configuring vlan <%=vid%> on $interface\"\n          sed -i ''/^BOOTPROTO=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          sed -i ''/^ONBOOT=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"DEVICE=$interface.<%=vid%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"BOOTPROTO=none\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"ONBOOT=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"IPADDR=<%=n.ipv4.ipAddr%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"NETMASK=<%=n.ipv4.netmask%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"GATEWAY=<%=n.ipv4.gateway%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"VLAN=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n\n          sed -i ''/^ONBOOT=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface\n          echo \"ONBOOT=no\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        <% \}); %>\n      <% \} else \{ %>\n        echo \"Configuring device $interface\"\n        sed -i ''/^BOOTPROTO=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface\n        sed -i ''/^ONBOOT=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"DEVICE=$interface\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        <%_ if (n.device.search(macRegex) === 0)\{ _%>\n            echo \"HWADDR=<%=n.device%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        <%_ \} _%>\n        echo \"BOOTPROTO=none\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"ONBOOT=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"IPADDR=<%=n.ipv4.ipAddr%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"NETMASK=<%=n.ipv4.netmask%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        <% if ( undefined != n.ipv4.gateway) \{ %>\n          echo \"GATEWAY=<%=n.ipv4.gateway%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        <% \} %>\n        <% if ( undefined != n.ipv4.mtu) \{ %>\n          echo \"MTU=<%=n.ipv4.mtu%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        <% \} %>\n\n      <% \} %>\n    <% \} %>\n    <% if( undefined != n.ipv6 ) \{ %>\n      <% if( undefined != n.ipv6.vlanIds ) \{ %>\n        <% n.ipv6.vlanIds.forEach(function(vid) \{ %>\n          echo \"Configuring vlan <%=vid%> on $interface\"\n          sed -i ''/^BOOTPROTO=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          sed -i ''/^ONBOOT=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"DEVICE=$interface.<%=vid%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"BOOTPROTO=none\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"ONBOOT=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"IPV6INIT=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"IPV6ADDR=<%=n.ipv6.ipAddr%>/<%=n.ipv6.prefixlen%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"IPV6_DEFAULTGW=<%=n.ipv6.gateway%>/<%=n.ipv6.prefixlen%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          echo \"VLAN=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface.<%=vid%>\n          <% ipv6 = 1 %>\n        <% \}); %>\n      <% \} else \{ %>\n        echo \"Configuring device $interface\"\n        sed -i ''/^BOOTPROTO=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface\n        sed -i ''/^ONBOOT=/d'' /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"DEVICE=$interface\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"BOOTPROTO=none\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"ONBOOT=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"IPV6INIT=yes\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"IPV6ADDR=<%=n.ipv6.ipAddr%>/<%=n.ipv6.prefixlen%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        echo \"IPV6_DEFAULTGW=<%=n.ipv6.gateway%>/<%=n.ipv6.prefixlen%>\" >> /etc/sysconfig/network-scripts/ifcfg-$interface\n        <% ipv6 = 1 %>\n      <% \} %>\n    <% \} %>\n  <% \}); %>\n  <% if( ipv6 ) \{ %>\n    grep -q -F ''NETWORKING_IPV6=yes'' /etc/sysconfig/network || echo \"NETWORKING_IPV6=yes\" >> /etc/sysconfig/network\n    grep -q -F ''IPV6_AUTOCONF=no'' /etc/sysconfig/network || echo \"IPV6_AUTOCONF=no\" >> /etc/sysconfig/network\n  <% \} %>\n<% \} %>\n\n# Setup DNS servers\n<% if (typeof dnsServers !== \'undefined\') \{ %>\n  <% if (typeof domain !== \'undefined\') \{ %>\n    echo \"search <%=domain%>\" > /etc/resolv.conf\n  <% \} %>\n  <% dnsServers.forEach(function(dns) \{ %>\n    echo \"nameserver <%=dns%>\" >> /etc/resolv.conf\n  <% \}) %>\n  chattr +i /etc/resolv.conf\n<% \} %>\n\n# Download the service to callback to RackHD after OS installation/reboot completion\necho \"RackHD POST script wget started\"\n/usr/bin/wget http://<%=server%>:<%=port%>/api/current/templates/<%=rackhdCallbackScript%>?nodeId=<%=nodeId%> -O /etc/rc.d/init.d/<%=rackhdCallbackScript%>\necho \"RackHD POST script chmod callback script\"\nchmod +x /etc/rc.d/init.d/<%=rackhdCallbackScript%>\n# Enable the above service, it should auto-disable after running once\nchkconfig <%=rackhdCallbackScript%> on\necho \"RackHD POST script chkconfig callback script complete\"\n\n# Enable Services\n<% if (typeof enableServices !== \'undefined\') \{ %>\n<%   for (var i = 0, len = enableServices.length; i < len; i++) \{ %>\nsystemctl enable <%=enableServices[i]%>\n<%   \} %>\n<% \} %>\n\n# Disable Services\n<% if (typeof disableServices !== \'undefined\') \{ %>\n<%   for (var i = 0, len = disableServices.length; i < len; i++) \{ %>\nsystemctl disable <%=disableServices[i]%>\n<%   \} %>\n<% \} %>\n\n#signify ORA the installation completed\nfor retry in $(seq 1 5);\ndo\n    /usr/bin/curl -X POST -H ''Content-Type:application/json'' http://<%=server%>:<%=port%>/api/current/notification?nodeId=<%=nodeId%>\n    if [ $? -eq 0 ]; then\n        echo \"Post Notification succeeded\"\n        break\n    else\n        echo \"Post Notification failed\"\n        sleep 1\n    fi\ndone;\n\n) 2>&1 >>/root/install-post-sh.log\nEOF\n%end\n\n# RackShift Custom Post-InstallScript\n%post --log=/root/rackshift-post-install.log\n<% if( typeof postInstallCommands !== \'undefined\' ) \{ %>\n  <% postInstallCommands.forEach(function(n) \{ %>\n    <%-n%>\n  <% \}); %>\n<% \} %>\t\n%end\n',
        'system', 1629698788504, 1629698788504);

insert into template
values (uuid(), 'debian-preseed',
        '#### Copyright 2017, Dell EMC, Inc.\n#### Contents of the preconfiguration file. \n### Localization\n# Preseeding only locale sets language, country and locale.\nd-i debian-installer/locale string en_US\nd-i debian-installer/language string en\n#d-i debian-installer/country string NL\nd-i debian-installer/locale string en_US.UTF-8\n#d-i localechooser/supported-locales multiselect en_US.UTF-8, nl_NL.UTF-8\n\n# Keyboard selection.\nd-i keyboard-configuration/xkb-keymap select us\n\n### Network configuration\n# Disable network configuration entirely. This is useful for cdrom\n# installations on non-networked devices where the network questions,\n# warning and long timeouts are a nuisance.\n#d-i netcfg/enable boolean false\n\n# netcfg will choose an interface that has link if possible. This makes it\n# skip displaying a list if there is more than one interface.\nd-i netcfg/choose_interface select auto\n\n# Any hostname and domain names assigned from dhcp take precedence over\n# values set here. However, setting the values still prevents the questions\n# from being shown, even if values come from dhcp.\n<% if (typeof hostname !== \'undefined\') \{ %>\nd-i netcfg/get_hostname string <%=hostname%>\n<% \} %>\n<% if (typeof domain !== \'undefined\') \{ %>\nd-i netcfg/get_domain string <%=domain%>\n<% \} %>\n\n# Disable that annoying WEP key dialog.\nd-i netcfg/wireless_wep string\n\n# If non-free firmware is needed for the network or other hardware, you can\n# configure the installer to always try to load it, without prompting. Or\n# change to false to disable asking.\n#d-i hw-detect/load_firmware boolean true\n\n### Mirror settings\n# If you select ftp, the mirror/country string does not need to be set.\n#d-i mirror/protocol string ftp\nd-i mirror/country string manual\n\n# Get server:port from repo\n<% var repoHostname = repo.match(/^(https?:\\/\\/)?([a-zA-Z0-9\\.:-]+)/)[2] -%>\nd-i mirror/http/hostname string <%=repoHostname%>\n# Get directory from repo\n<% var repoDirectory = repo.replace(/^(https?:\\/\\/)?([a-zA-Z0-9\\.:-]+)/g,\"\") -%>\nd-i mirror/http/directory string <%=repoDirectory%>\n\nd-i preseed/early_command string \\\n<%_ if( typeof progressMilestones !== \'undefined\' && progressMilestones.preConfigUri ) \{ _%>\nwget ''http://<%=server%>:<%=port%><%-progressMilestones.preConfigUri%>'' || true; \\\n<%_ \} _%>\numount /media || true;\n\n<% if ( osName === ''ubuntu'' ) \{ %>\n### Setting up Ubuntu APT \nd-i apt-setup/restricted boolean false\nd-i mirror/http/proxy string\nd-i apt-setup/universe boolean false\nd-i apt-setup/backports boolean false\nd-i apt-setup/proposed boolean false\nd-i apt-setup/security_host string\nd-i apt-setup/local0/repository string deb <%=repo%> <%=version%> main restricted universe multiverse\nd-i apt-setup/local0/source boolean false\nd-i debian-installer/allow_unauthenticated boolean true\n<% \} %>\n\n### Clock and time zone setup\n# Controls whether or not the hardware clock is set to UTC.\nd-i clock-setup/utc boolean true\n\n# You may set this to any valid setting for $TZ; see the contents of\n# /usr/share/zoneinfo/ for valid values.\n<% if (typeof timezone !== \'undefined\') \{ %>\nd-i time/zone string <%=timezone%>\n<% \} %>\n# Controls whether to use NTP to set the clock during the install\n<% if (typeof ntp !== \'undefined\') \{ %>\nd-i clock-setup/ntp boolean true\n# NTP server to use. The default is almost always fine here.\nd-i clock-setup/ntp-server string <%=ntp%>\n<% \} %>\n\n### Partitioning\nd-i partman/early_command string \\\n<%_ if( typeof progressMilestones !== \'undefined\' && progressMilestones.startPartitionUri ) \{ _%>\nwget ''http://<%=server%>:<%=port%><%-progressMilestones.startPartitionUri%>'' || true;\n<%_ \} _%>\n\nd-i partman-auto/disk string <%=installDisk%>\nd-i partman-auto/method string lvm\nd-i partman-lvm/device_remove_lvm boolean true\nd-i partman-lvm/device_remove_lvm_span boolean true\nd-i partman-md/device_remove_md boolean true\nd-i partman-auto/purge_lvm_from_device boolean true\nd-i partman-auto-lvm/new_vg_name string debian\nd-i partman-lvm/confirm boolean true\nd-i partman/alignment string \"optimal\"\nd-i partman-auto-lvm/guided_size string max\n\n# recipe should be a template substitiution \n# For automatic partitioning we use atomic otherwise we can use expert_recipe. \n#d-i partman-auto/choose_recipe select atomic\n#d-i partman-auto/expert_recipe string                         \\\n#      boot-root ::                                            \\\n#              64 128 128 ext4                                 \\\n#                      $primary\{ \} $bootable\{ \}                \\\n#                      method\{ format \} format\{ \}              \\\n#                      use_filesystem\{ \} filesystem\{ ext4 \}    \\\n#                      mountpoint\{ /boot \}                     \\\n#              .                                               \\\n#              128 512 200% linux-swap                         \\\n#                      method\{ swap \} format\{ \}                \\\n#              .                                               \\\n#              512 512 512 ext4                                \\\n#                      method\{ format \} format\{ \} $lvmok\{ \}    \\\n#                      use_filesystem\{ \} filesystem\{ ext4 \}    \\\n#                      mountpoint\{ / \}                         \\\n#              .                                               \\\n#              256 256 256 ext4                                \\\n#                      method\{ format \} format\{ \} $lvmok\{ \}    \\\n#                      use_filesystem\{ \} filesystem\{ ext4 \}    \\\n#                      mountpoint\{ /home \}                     \\\n#              .                                               \\\n#              256 512 512 ext4                                \\\n#                      method\{ format \} format\{ \} $lvmok\{ \}    \\\n#                      use_filesystem\{ \} filesystem\{ ext4 \}    \\\n#                      mountpoint\{ /tmp \}                      \\\n#              .                                               \\\n#              2048 4096 4096 ext4                             \\\n#                      method\{ format \} format\{ \} $lvmok\{ \}    \\\n#                      use_filesystem\{ \} filesystem\{ ext4 \}    \\\n#                      mountpoint\{ /usr \}                      \\\n#              .                                               \\\n#              2048 4096 -1 ext4                               \\\n#                      method\{ format \} format\{ \} $lvmok\{ \}    \\\n#                      use_filesystem\{ \} filesystem\{ ext4 \}    \\\n#                      mountpoint\{ /var \}                      \\\n#              .\n#\n\n<% if (typeof installPartitions === \'undefined\' || installPartitions.length < 2) \{ %>\nd-i partman-auto/choose_recipe select atomic\n<% \} else \{   %>\nd-i partman-auto/expert_recipe string \\\n\t\t\t\tboot-root :: 1 1 1 free \\\n\t\t\t\t$iflabel\{ gpt \} $reusemethod\{ \} method\{ biosgrub \} . \\\n\t\t<% installPartitions.forEach(function(partition,idx) \{ %>\n\t\t\t<% if(partition.mountPoint === ''/boot'') \{ %> \n\t\t\t\t256 512 <%=partition.size%> <%=partition.fsType%> \\\n\t\t\t\t$defaultignore\{ \} $bootable\{ \} \\\n\t\t\t\tmethod\{ format \} format\{ \} \\\n\t\t\t\tuse_filesystem\{ \} filesystem\{ <%=partition.fsType%> \}\\\n\t\t\t\tmountpoint\{ <%=partition.mountPoint%> \} . \\\n\t\t\t<% \} else  if(partition.mountPoint === ''swap'') \{ %> \\\n\t\t\t\t<%=partition.size%> 512 200% linux-swap \\\n\t\t\t\t$reusemethod\{ \} method\{ swap \} \\\n\t\t\t\tformat\{ \}  $lvmok\{ \} . \\\n\t\t\t<% \} else \{ %>\n\t\t\t<% if (partition.size === \"auto\") \{ %> \n\t\t\t\t2000 10000 -1 <%=partition.fsType%> \\\n\t\t\t\t$lvmok\{ \} method\{ format \} \\ \n\t\t\t\tformat\{ \} use_filesystem\{ \} \\\n\t\t\t\tfilesystem\{ <%=partition.fsType%> \} mountpoint\{ <%=partition.mountPoint%> \} . \\\n\t\t\t<% \} else \{ %>\n\t\t\t\t<%=partition.size%> 512 <%=partition.size%> <%=partition.fsType%> \\\n\t\t\t\t$lvmok\{ \} method\{ format \} \\\n\t\t\t\tformat\{ \} use_filesystem\{ \} \\\n\t\t\t\tfilesystem\{ <%=partition.fsType%> \} mountpoint\{ <%=partition.mountPoint%> \} . \\\n\t\t\t<% \} %>\n\t\t <% \}\}) %> \n<% \} %>\n\n# If you just want to change the default filesystem from ext3 to something\n# else, you can do that without providing a full recipe.\nd-i partman/default_filesystem string ext4\nd-i partman-lvm/confirm_nooverwrite boolean true\nd-i partman/confirm_write_new_label boolean true\nd-i partman/choose_partition select finish\nd-i partman/confirm boolean true\nd-i partman/confirm_nooverwrite boolean true\n\n### Account Setup \n# Skip creation of a root account (normal user account will be able to\n# use sudo). The default is false; pretemplate this to true if you want to set\n# a root password.\nd-i passwd/root-login boolean true\n# Alternatively, to skip creation of a normal user account.\nd-i passwd/make-user boolean false\n# Root password, either in clear text\n# or encrypted using an MD5 hash.\nd-i passwd/root-password-crypted password <%-rootEncryptedPassword%>\n\n### Package selection\n# Individual additional packages to install\n<% if ( osName === ''ubuntu'' ) \{ %>\ntasksel tasksel/first multiselect ubuntu-server\n<% \} else \{ %>\ntasksel tasksel/first multiselect standard, ssh-server\n<% \} %>\n<% var pkgs = ((typeof kvm === \'undefined\' || !kvm) ? '''' : ''qemu-kvm virt-manager libvirt0 python-libvirt bridge-utils'') -%>\n# Minimum packages (see postinstall.sh)\nd-i pkgsel/include string openssh-server wget curl ssl-cert vlan\nd-i pkgsel/upgrade select safe-upgrade\nd-i pkgsel/update-policy select none\nd-i pkgsel/language-packs multiselect en\nd-i pkgsel/install-language-support boolean false\n# Policy for applying updates. May be \"none\" (no automatic updates),\n# \"unattended-upgrades\" (install security updates automatically), or\n# \"landscape\" (manage system with Landscape).\nd-i pkgsel/update-policy select none\n\n### Boot loader installation\n# Grub is the default boot loader (for x86). If you want lilo installed\n# instead, uncomment this:\n#d-i grub-installer/skip boolean true\n# To also skip installing lilo, and install no bootloader, uncomment this\nd-i grub-installer/only_debian boolean true\n# This one makes grub-installer install to the MBR if it also finds some other\n# OS, which is less safe as it might not be able to boot that other OS.\nd-i grub-installer/with_other_os boolean true\n\nd-i grub-installer/bootdev string <%=installDisk%>\n\n### Finishing up the installation\n# During installations from serial console, the regular virtual consoles\n# (VT1-VT6) are normally disabled in /etc/inittab. Uncomment the next\n# line to prevent this.\n#d-i finish-install/keep-consoles boolean true\n\n# Avoid that last message about the install being complete.\nd-i finish-install/reboot_in_progress note\n\n# Monitor autodetection is recommended.\nxserver-xorg xserver-xorg/autodetect_monitor boolean true\n\n#### Advanced options\n### Running custom commands during the installation\n# d-i preseeding is inherently not secure. Nothing in the installer checks\n# for attempts at buffer overflows or other exploits of the values of a\n# preconfiguration file like this one. Only use preconfiguration files from\n# trusted locations! To drive that home, and because it''s generally useful,\n# here''s a way to run any shell command you''d like inside the installer,\n# automatically.\n\n# This first command is run as early as possible, just after\n# preseeding is read.\n#d-i preseed/early_command string anna-install some-udeb\n# This command is run immediately before the partitioner starts. It may be\n# useful to apply dynamic partitioner preseeding that depends on the state\n# of the disks (which may not be visible when preseed/early_command runs).\n#d-i partman/early_command \\\n#       string debconf-set partman-auto/disk \"$(list-devices disk | head -n1)\"\n# This command is run just before the install finishes, but when there is\n# still a usable /target directory. You can chroot to /target and use it\n# directly, or use the apt-install and in-target commands to easily install\n# packages and run commands in the target system.\n#d-i preseed/late_command string apt-install zsh; in-target chsh -s /bin/zsh\n\nd-i preseed/late_command string \\\n<%_ if( typeof progressMilestones !== \'undefined\' && progressMilestones.postConfigUri ) \{ _%>\nin-target curl -X POST -H ''Content-Type:application/json'' ''http://<%=server%>:<%=port%><%-progressMilestones.postConfigUri%>'' || true; \\\n<%_ \} _%>\n\n#enable root ssh\nin-target sed -i ''s/.*PermitRootLogin.*/PermitRootLogin yes/g'' /etc/ssh/sshd_config; \\\n\n#Enable Network standards that supports VLANs\n#Load the 8021q module into the kernel\nin-target modprobe 8021q; \\\nin-target su -c ''echo \"8021q\" >> /etc/modules''; \\\n\n#config vlan\n<%_ if (typeof networkDevices !== \'undefined\' && networkDevices.length > 0) \{ _%>\n<%_ networkDevices.forEach(function(n) \{ _%>\n    <%_ for (p in n) \{ _%>\n        <%_ ip = n[p]; _%>\n        <%_ if ([''ipv4'',''ipv6''].indexOf(p) === -1 || undefined == ip) continue; _%>\n        <%_ if (undefined !== ip.vlanIds) \{ _%>\n            <%_ ip.vlanIds.forEach(function(vid) \{ _%>\nin-target vconfig add ip.device <%=vid%>; \\\n            <%_ \}); _%>\n        <%_ \} _%>\n    <%_ \} _%>\n<%_ \}); _%>\n<%_ if (typeof version !== \'undefined\' && version === ''artful'') \{ _%>\nin-target wget http://<%=server%>:<%=port%>/api/current/templates/ubuntu-netplan-interfaces?nodeId=<%=nodeId%> -O  /etc/netplan/01-netcfg.yaml; \\\n<%_ \} else if (typeof version !== \'undefined\' && version === ''trusty'') \{ _%>\nwget http://<%=server%>:<%=port%>/api/current/templates/debian-interfaces?nodeId=<%=nodeId%> -O /etc/network/interfaces; \\\n<%_ \} else \{ _%>\nin-target wget http://<%=server%>:<%=port%>/api/current/templates/debian-interfaces?nodeId=<%=nodeId%> -O /etc/network/interfaces; \\\n<%_ \} _%>\n<%_ \} _%>\nin-target wget http://<%=server%>:<%=port%>/api/current/templates/post-install-debian.sh?nodeId=<%=nodeId%> -O ./post-install.sh; \\\nin-target chmod +x ./post-install.sh; \\\nin-target ./post-install.sh; \\\nin-target wget http://<%=server%>:<%=port%>/api/current/templates/debian-sources?nodeId=<%=nodeId%> -O /etc/apt/sources.list; \\\nin-target wget http://<%=server%>:<%=port%>/api/current/templates/<%=rackhdCallbackScript%>?nodeId=<%=nodeId%> -O /etc/init.d/RackHDCallback; \\\nin-target chmod +x /etc/init.d/RackHDCallback; \\\nin-target update-rc.d RackHDCallback defaults; \\\nin-target curl -X POST -H ''Content-Type:application/json'' http://<%=server%>:<%=port%>/api/current/notification?nodeId=<%=nodeId%>\n',
        'system', 1629698788504, 1629698788504);

insert into template
values (uuid(), 'esx-ks',
        'accepteula\n<!-- # Copyright 2016-2018, Dell EMC, Inc. -->\n<% if (typeof clearDisk === \'undefined\') \{ %>\n<%   clearDisk = installDisk %>\n<% \} %>\n\n<% if (clearDisk === ''firstdisk'') \{ %>\n  clearpart --firstdisk --overwritevmfs\n<% \} else if (clearDisk === ''alldrives'') \{ %>\n  clearpart --alldrives --overwritevmfs\n<% \} else \{ %>\n  clearpart --drives=<%=clearDisk%> --overwritevmfs\n<% \} %>\n\n<% if (installDisk === \"firstdisk\") \{ %>\n  install --firstdisk --overwritevmfs\n<% \} else \{ %>\n  install --disk=<%=installDisk%> --overwritevmfs\n<% \} %>\nrootpw <%-rootPlainPassword%>\n\n# Search the networkDevices and set the first device (if defined) up.\n# Use kargs if set to override the default kickstart network device\n# If no device is specified in the networkDevices, then we fallback\n# to setting ''vmnic0'' up as DHCP. The device can be specified with a\n# MAC address or device name (''vmnic0'' for example)\n<% if(Object.keys(kargs).length === 0) \{ %>\n<% if( typeof networkDevices !== \'undefined\' ) \{ %>\n  <% need_default = networkDevices.every(function(n) \{ %>\n    <% if(typeof n.ipv4 !== \'undefined\') \{ %>\n      <% ipopts = ''--ip='' + n.ipv4.ipAddr + '' --gateway='' + n.ipv4.gateway + '' --netmask='' + n.ipv4.netmask %>\n      <% if (typeof n.ipv4.vlanIds !== \'undefined\' ) \{ %>\n        <% ipopts += '' --vlanid='' + n.ipv4.vlanIds[0] %>\n      <% \} %>\n      network --bootproto=static --device=<%=n.device%> <%=ipopts%>\n    <% \} else \{ %>\n      network --bootproto=dhcp --device=<%=n.device%>\n    <% \} %>\n    <% return false; %>\n  <% \}); %>\n  <% if (need_default) \{ %>\n    network --bootproto=dhcp --device=vmnic0\n  <% \} %>\n<% \} %>\n<% \} %>\n\nreboot\n\n%firstboot --interpreter=busybox\n\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.firstBootUri ) \{ %>\n    wget \"http://<%=server%>:<%=port%><%-progressMilestones.firstBootUri%>\" || true\n<% \} %>\n\n# enable VHV (Virtual Hardware Virtualization to run nested 64bit Guests + Hyper-V VM)\ngrep -i \"vhv.enable\" /etc/vmware/config || echo \"vhv.enable = \\\"TRUE\\\"\" >> /etc/vmware/config\n\nvim-cmd hostsvc/enable_ssh\nvim-cmd hostsvc/start_ssh\nvim-cmd hostsvc/enable_esx_shell\nvim-cmd hostsvc/start_esx_shell\n\n#suppress shell warnings\nesxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1\n\n#Set the ESXi Shell Interactive idle time logout\nesxcli system settings advanced set -o /UserVars/ESXiShellInteractiveTimeout -i 3600\n\n#Set Console port redirect\nesxcli system settings kernel set -s=\"gdbPort\" -v=<%=gdbPort%>\nesxcli system settings kernel set -s=\"logPort\" -v=<%=logPort%>\nesxcli system settings kernel set -s=\"tty2Port\" -v=<%=comport%>\nesxcli system settings kernel set -s=\"debugLogToSerial\" -v=<%=debugLogToSerial%>\n\n# disable firewall\nesxcli network firewall set --default-action false --enabled no\n\n# set hostname and domain\n<% var hostnameCmdStr=''''; %>\n<% if (typeof domain === ''string'') hostnameCmdStr += ('' --domain '' + domain) %>\n<% if (typeof hostname === ''string'') hostnameCmdStr += ('' --host '' + hostname) %>\n<% if (typeof fqdn === ''string'') hostnameCmdStr += ('' --fqdn '' + fqdn) %>\n<% if (hostnameCmdStr.length > 0) \{ %>\n    esxcli system hostname set <%=hostnameCmdStr%>\n<% \} %>\n\n#config root account\n<% if (typeof rootSshKey !== \'undefined\') \{ %>\n    echo <%=rootSshKey%> > /etc/ssh/keys-root/authorized_keys\n<%\} %>\n\n#create users\nrm /vmfs/volumes/datastore1/rackhd_create_sshkeys\n<% if( typeof users !== \'undefined\' ) \{ %>\n<% users.forEach(function(user) \{ %>\n    /usr/lib/vmware/auth/bin/adduser -s /bin/sh -G root -h / -D <%=user.name%>\n    echo <%-user.plainPassword%> | passwd <%=user.name%> --stdin\n    <% if (typeof user.sshKey !== \'undefined\') \{ %>\n        echo \"mkdir /etc/ssh/keys-<%=user.name%>\" >> /vmfs/volumes/datastore1/rackhd_create_sshkeys\n        echo \"echo <%=user.sshKey%> > /etc/ssh/keys-<%=user.name%>/authorized_keys\" >> /vmfs/volumes/datastore1/rackhd_create_sshkeys\n    <%\} %>\n<%\}) %>\n<%\} %>\nchmod +x /vmfs/volumes/datastore1/rackhd_create_sshkeys\n\n#setup ntp\ncat > /etc/ntp.conf << __NTP_CONFIG__\nrestrict default kod nomodify notrap noquerynopeer\nrestrict 127.0.0.1 kkl,lkl\n<% if( typeof ntpServers !== \'undefined\' ) \{ %>\n   <% ntpServers.forEach(function(ntp) \{ %>\n      server <%= ntp %>\n   <% \}); %>\n<% \} %>\n__NTP_CONFIG__\n/sbin/chkconfig ntpd on\n\n#enter maintenance mode\nesxcli system maintenanceMode set -e true\n\n#copy the first boot logs\ncp /var/log/hostd.log \"/vmfs/volumes/datastore1/firstboot-hostd.log\"\ncp /var/log/esxi_install.log \"/vmfs/volumes/datastore1/firstboot-esxi_install.log\"\n\n#setup DNS\n<% if( typeof dnsServers !== \'undefined\' ) \{ %>\n  <% if ( typeof domain !== \'undefined\' ) \{ %>\n  esxcli network ip dns search add --domain=<%=domain%>\n  <% \} %>\n  <% dnsServers.forEach(function(dns) \{ %>\n    esxcli network ip dns server add --server=<%= dns %>\n  <% \}); %>\n<% \} %>\n\n#create vSwitches with uplinks. An uplink can be specifed with its MAC\n#address or device name\n<% if ( typeof switchDevices !== \'undefined\' ) \{ %>\n  <% switchDevices.forEach(function(n) \{ %>\n    esxcli network vswitch standard add -v \"<%=n.switchName%>\"\n    <% if( typeof n.failoverPolicy !== \'undefined\' ) \{ %>\n        esxcli network vswitch standard policy failover set -l \"<%=n.failoverPolicy%>\" -v \"<%=n.switchName%>\"\n    <% \} %>\n    <% if( undefined !== n.uplinks ) \{ %>\n      <% n.uplinks.forEach(function(s) \{ %>\n        currdev=<%=s.toLowerCase()%>\n        <% if (s.substring(0,5) !== ''vmnic'') \{ %>\n          currdev=`esxcli network nic list | grep $currdev | cut -d '' '' -f 1`\n        <% \} %>\n        currsw=`esxcli --debug --formatter=csv network vswitch standard list | grep $currdev | awk -F, ''\{print $9\}''`\n        if [ \"$currsw\" != \"\" ]; then\n          esxcli network vswitch standard uplink remove -v $currsw -u $currdev\n        fi\n        esxcli network vswitch standard uplink add -v <%=n.switchName%> -u $currdev\n      <% \}); %>\n    <% \} %>\n  <% \}); %>\n<% \} %>\n\n#parameters:vmkName, portgroup, switchName\ncreateVmk () \{\n    vmkMac=`esxcli network ip interface list | sed -ne ''/^.*\\Name: $1.*$/\{N;s/.*MAC Address: //;p\}''`\n    esxcli network vswitch standard portgroup add -p $2 -v $3\n    esxcli network ip interface remove -i $1\n    if [ -z $vmkMac ]\n    then\n      esxcli network ip interface add -i $1 -p $2\n    else\n      esxcli network ip interface add -i $1 -p $2 -M $vmkMac\n    fi\n\}\n\n<% vmkid = 0 %>\n<% if( typeof networkDevices !== \'undefined\' ) \{ %>\n  <% networkDevices.forEach(function(n) \{ %>\n    currdev=<%=n.device%>\n    esxSwitchName=<%= typeof n.esxSwitchName!=\'undefined\' ? n.esxSwitchName : ''vSwitch0'' %>\n    <% if (n.device.substring(0,5) != ''vmnic'') \{ %>\n       currdev=`esxcli network nic list | grep <%=n.device%> | cut -d '' '' -f 1`\n    <% \} %>\n    <% if( undefined !== n.ipv4 ) \{ %>\n      <% if( undefined !== n.ipv4.vlanIds ) \{ %>\n        <% n.ipv4.vlanIds.forEach(function(vid) \{ %>\n          <% vmkname = ''vmk'' + vmkid++ %>\n          createVmk <%=vmkname%> $currdev.<%=vid%> $esxSwitchName\n          esxcli network ip interface ipv4 set -i <%=vmkname%> -I <%=n.ipv4.ipAddr%> -N <%=n.ipv4.netmask%> -t static\n          esxcli network ip route ipv4 add -n default -g <%=n.ipv4.gateway%>\n          esxcli network vswitch standard portgroup set -p $currdev.<%=vid%> -v <%=vid %>\n        <% \}); %>\n      <% \} else \{ %>\n        <% vmkname = ''vmk'' + vmkid++ %>\n        createVmk <%=vmkname%> $currdev $esxSwitchName\n        esxcli network ip interface ipv4 set -i <%=vmkname%> -I <%=n.ipv4.ipAddr%> -N <%=n.ipv4.netmask%> -t static\n        esxcli network ip route ipv4 add -n default -g <%=n.ipv4.gateway%>\n      <% \} %>\n    <% \} %>\n    <% if( undefined !== n.ipv6 ) \{ %>\n      <% if( undefined !== n.ipv6.vlanIds ) \{ %>\n        <% n.ipv6.vlanIds.forEach(function(vid) \{ %>\n          <% vmkname = ''vmk'' + vmkid++ %>\n          createVmk <%=vmkname%> $currdev.<%=vid%> $esxSwitchName\n          esxcli network ip interface ipv6 address add -i <%=vmkname%> -I <%=n.ipv6.ipAddr%>/<%=n.ipv6.prefixlen%>\n          <% if(undefined !== n.ipv6.gateway) \{ %>\n          esxcli network interface ipv6 set -i <%=vmkname%> -d off -r off\n          esxcli network ip interface ipv6 set -i <%=vmkname%> -g <%=n.ipv6.gateway%>\n          <% \} %>\n          esxcli network vswitch standard portgroup set -p $currdev.<%=vid%> -v <%=vid %>\n        <% \}); %>\n      <% \} else \{ %>\n        <% vmkname = ''vmk'' + vmkid++ %>\n        createVmk <%=vmkname%> $currdev $esxSwitchName\n        esxcli network ip interface ipv6 address add -i <%=vmkname%> -I <%=n.ipv6.ipAddr%>/<%=n.ipv6.prefixlen%>\n        esxcli network ip interface ipv6 set -i <%=vmkname%> -g <%=n.ipv6.gateway%>\n      <% \} %>\n    <% \} %>\n    <% if( (undefined === n.ipv6) && (undefined === n.ipv4) ) \{ %>\n      <% vmkname = ''vmk'' + vmkid++ %>\n      createVmk <%=vmkname%> $currdev $esxSwitchName\n      esxcli network ip interface ipv4 set -i <%=vmkname%> -t dhcp\n    <% \} %>\n  <% \}); %>\n<% \} %>\n\n<% if( typeof postInstallCommands !== \'undefined\' ) \{ %>\n  <% postInstallCommands.forEach(function(n) \{ %>\n    <%-n%>\n  <% \}); %>\n<% \} %>\n\n# Download the service to callback to RackHD after OS installation/reboot completion\n# %firstboot ends with a reboot, this script will run afterwards to signify completion\n# of the installer and all reboot steps.\n#\n# The approved method for adding startup commands is to write to /etc/rc.local.d/local.sh,\n# which is a pre-existing file with a sticky bit set by VisorFS. You can''t just create new\n# files and expect them to stick around, even if you set a sticky bit yourself.\n# The /sbin/auto-backup.sh script will ensure the changes are persisted across reboots and\n# MUST be executed after making any changes.\n#\n# See these links for more information:\n# http://www.virtuallyghetto.com/2011/08/how-to-persist-configuration-changes-in.html\n# http://blogs.vmware.com/vsphere/2011/09/how-often-does-esxi-write-to-the-boot-disk.html\n# https://communities.vmware.com/message/1273849#1273849\n#\n# NOTE: this method only works for ESXi 5.1 or greater. For older versions, the changes\n# must be written to /etc/rc.local instead.\n#\n# NOTE: this script will execute right away as a result of writing it to local.sh\n# along with executing on every subsequent boot\n#\n# Try to download call back script 60 times 1 second\n# sleep in between to allow link to be up after DHCP\nfor retry in $(seq 1 60);\ndo\n    wget http://<%=server%>:<%=port%>/api/current/templates/<%=rackhdCallbackScript%>?nodeId=<%=nodeId%> -O /etc/rc.local.d/local.sh\n    if [ $? -eq 0 ]; then\n        logger -p user.info \"RackHD''s call back script was downloaded successfully after $retry attempt(s).\"\n        break\n    else\n        logger -p user.info \"Failed to download RackHD''s call back script after $retry attempt(s).\"\n        sleep 1\n    fi\ndone;\n\nif [ $retry -eq 60 ]; then\n   logger -p user.err \"RackHD''s call back script was not downloaded successfully.\"\nfi\n\n#backup ESXi configuration to persist it\n/sbin/auto-backup.sh\n\n#reboot the system after host configuration\nesxcli system shutdown reboot -d 10 -r \"Rebooting after first boot host configuration\"\n\n%pre --interpreter=busybox\n\n#notify the current progress\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.preConfigUri ) \{ %>\n    # the url may contain query, the symbol ''&'' will mess the command line logic, so the whole url need be wrapped in quotation marks\n    wget \"http://<%=server%>:<%=port%><%-progressMilestones.preConfigUri%>\" || true\n<% \} %>\n\n\n%post --interpreter=busybox\n\n#notify the current progress\n<% if( typeof progressMilestones !== \'undefined\' && progressMilestones.postConfigUri ) \{ %>\n    # the url may contain query, the symbol ''&'' will mess the command line logic, so the whole url need be wrapped in quotation marks\n    wget \"http://<%=server%>:<%=port%><%-progressMilestones.postConfigUri%>\" || true\n<% \} %>\n\n#disable firewall\nlocalcli network firewall set --enabled no\n#signify ORA the installation completed\nBODY=\"\{\"\nBODY=$BODY\"\\\"nodeId\\\": \\\"<%=nodeId%>\\\"\"\nBODY=$BODY\"\}\"\nBODYLEN=$(echo -n $\{BODY\} | wc -c)\necho -ne \"POST /api/current/notification HTTP/1.0\\r\\nHost: <%=server%>\\r\\nContent-Type: application/json\\r\\nContent-Length: $\{BODYLEN\}\\r\\n\\r\\n$\{BODY\}\" | nc -i 3 <%=server%> <%=port%>\n',
        'system', 1629698788504, 1629698788504);

insert into template
values (uuid(), 'unattend_server2012.xml',
        '<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Copyright © 2017 Dell Inc. or its subsidiaries. All Rights Reserved. -->\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\">\n    <settings pass=\"windowsPE\">\n        <component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <DiskConfiguration>\n                <WillShowUI>OnError</WillShowUI>\n                <Disk wcm:action=\"add\">\n                    <CreatePartitions>\n                        <CreatePartition wcm:action=\"add\">\n                            <Order>1</Order>\n                            <Size>100</Size>\n                            <Type>Primary</Type>\n                        </CreatePartition>\n                        <CreatePartition wcm:action=\"add\">\n                            <Order>2</Order>\n                            <Extend>true</Extend>\n                            <Type>Primary</Type>\n                        </CreatePartition>\n                    </CreatePartitions>\n                    <ModifyPartitions>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Active>true</Active>\n                            <Label>Boot</Label>\n                            <Format>NTFS</Format>\n                            <Order>1</Order>\n                            <PartitionID>1</PartitionID>\n                        </ModifyPartition>\n                        <ModifyPartition wcm:action=\"add\">\n                            <Format>NTFS</Format>\n                            <Order>2</Order>\n                            <PartitionID>2</PartitionID>\n                            <Label>System</Label>\n                        </ModifyPartition>\n                    </ModifyPartitions>\n                    <DiskID>0</DiskID>\n                    <WillWipeDisk>true</WillWipeDisk>\n                </Disk>\n            </DiskConfiguration>\n            <ImageInstall>\n                <OSImage>\n                    <InstallTo>\n                        <PartitionID>2</PartitionID>\n                        <DiskID>0</DiskID>\n                    </InstallTo>\n                    <InstallToAvailablePartition>false</InstallToAvailablePartition>\n                    <WillShowUI>OnError</WillShowUI>\n                    <InstallFrom>\n                        <MetaData wcm:action=\"add\">\n                            <Key>/IMAGE/INDEX</Key>\n                            <Value>2</Value>\n                        </MetaData>\n                    </InstallFrom>\n                </OSImage>\n            </ImageInstall>\n            <UserData>\n                <ProductKey>\n                    <Key><%=productkey%></Key>\n                    <WillShowUI>OnError</WillShowUI>\n                </ProductKey>\n                <AcceptEula>true</AcceptEula>\n                <FullName>--</FullName>\n                <Organization>--</Organization>\n            </UserData>\n        </component>\n\n        <component name=\"Microsoft-Windows-International-Core-WinPE\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <SetupUILanguage>\n                <UILanguage>en-US</UILanguage>\n            </SetupUILanguage>\n            <InputLocale>en-US</InputLocale>\n            <UILanguage>zh-CN</UILanguage>\n            <SystemLocale>en-US</SystemLocale>\n            <UserLocale>en-US</UserLocale>\n        </component>\n    </settings>\n    <settings pass=\"oobeSystem\">\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"NonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <VisualEffects>\n                <FontSmoothing>ClearType</FontSmoothing>\n            </VisualEffects>\n            <OOBE>\n                <HideEULAPage>true</HideEULAPage>\n                <ProtectYourPC>3</ProtectYourPC>\n                <NetworkLocation>Work</NetworkLocation>\n            </OOBE>\n            <UserAccounts>\n                <AdministratorPassword>\n                    <Value><%-password%></Value>\n                    <PlainText>true</PlainText>\n                </AdministratorPassword>\n                <LocalAccounts>\n                    <LocalAccount wcm:action=\"add\">\n                        <Password>\n                            <Value><%-password%></Value>\n                            <PlainText>true</PlainText>\n                        </Password>\n                        <Description>Local Administrator</Description>\n                        <DisplayName>Administrator</DisplayName>\n                        <Group>Administrators;users</Group>\n                        <Name><%=username%></Name>\n                    </LocalAccount>\n                </LocalAccounts>\n            </UserAccounts>\n            <FirstLogonCommands>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>1</Order>\n                    <CommandLine>powershell -Command \"powershell -Command \"Start-Sleep -s 60\"</CommandLine>\n                    <Description>flag the end of the setup</Description>\n                    <RequiresUserInput>false</RequiresUserInput>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>2</Order>\n                    <% if( firewallDisable ) \{ %>\n                    <CommandLine>powershell -Command \"Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False\" </CommandLine>\n                    <Description>disable firewall on node to be able to ping the new IP when max payload is used</Description>\n                    <% \} %>\n                    <RequiresUserInput>false</RequiresUserInput>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>3</Order>\n                    <CommandLine>powershell -Command \"curl http://<%=server%>:<%=port%>/api/current/templates/post-windows-install.ps1?nodeId=<%=nodeId%>\" -Outfile post-windows-install.ps1 </CommandLine>\n                    <Description>setup any the VLAN IDs and trigger the end of the install workflow</Description>\n                    <RequiresUserInput>false</RequiresUserInput>\n                </SynchronousCommand>\n                <SynchronousCommand wcm:action=\"add\">\n                    <Order>4</Order>\n                    <CommandLine>powershell -ExecutionPolicy ByPass -File post-windows-install.ps1</CommandLine>\n                    <Description>run the script</Description>\n                    <RequiresUserInput>false</RequiresUserInput>\n                </SynchronousCommand>\n            </FirstLogonCommands>\n            <AutoLogon>\n                <Password>\n                    <Value><%-password%></Value>\n                    <PlainText>true</PlainText>\n                </Password>\n                <Enabled>true</Enabled>\n                <LogonCount>2</LogonCount>\n                <Username><%=username%></Username>\n            </AutoLogon>\n            <RegisteredOrganization>--</RegisteredOrganization>\n            <RegisteredOwner>--</RegisteredOwner>\n        </component>\n    </settings>\n    <settings pass=\"specialize\">\n        <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <TimeZone>Pacific Standard Time</TimeZone>\n            <ComputerName><%=hostname%></ComputerName>\n        </component>\n        <component name=\"Microsoft-Windows-TCPIP\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n            <% if( typeof networkDevices !== \'undefined\' ) \{ %>\n            <Interfaces>\n            <% networkDevices.forEach(function(n) \{ %>\n            <% cidr_bits = 0 %>\n            <% dhcp_ipv4 = false %>\n            <% dhcp_ipv6 = false %>\n            <% ipAddress = 0 %>\n            <% gateWay = 0 %>\n            <% ipv6_cidr_bits = 0 %>\n            <% ipv6_ipAddress = 0 %>\n            <% ipv6_gateWay = 0 %>\n\n            <% if( undefined != n.ipv4 ) \{ %>\n            <% if( undefined != n.ipv4.netmask ) \{ %>\n            <% n.ipv4.netmask.split(''.'').forEach(function(octet) \{%>\n            <%cidr_bits+=((octet >>> 0).toString(2).match(/1/g)||[]).length;%>\n            <%\});%>\n            <% \} %>\n\n            <% if( undefined != n.ipv4.ipAddr ) \{ %>\n            <% ipAddress =n.ipv4.ipAddr %>\n            <% \} else \{  %>\n            <% dhcp_ipv4 = true %>\n            <% \} %>\n\n            <% if( undefined != n.ipv4.gateway ) \{ %>\n            <% gateWay  =n.ipv4.gateway %>\n            <% \} %>\n\n            <%\} %>\n\n            <% if( undefined != n.ipv6 ) \{ %>\n            <% if( undefined != n.ipv6.prefixlen ) \{ %>\n                <% ipv6_cidr_bits = n.ipv6.prefixlen %>\n            <% \} %>\n\n            <% if( undefined != n.ipv6.ipAddr ) \{ %>\n                <% ipv6_ipAddress = n.ipv6.ipAddr %>\n            <% \} else \{ %>\n                <% dhcp_ipv6 = true %>\n            <% \} %>\n\n            <% if( undefined != n.ipv6.gateway ) \{ %>\n                <% ipv6_gateWay = n.ipv6.gateway %>\n            <% \} %>\n\n            <% \} %>\n\n\n                <Interface wcm:action=\"add\">\n                    <Ipv4Settings>\n                        <DhcpEnabled><%= dhcp_ipv4 %></DhcpEnabled>\n                        <Metric>20</Metric>\n                        <RouterDiscoveryEnabled>false</RouterDiscoveryEnabled>\n                    </Ipv4Settings>\n                    <Ipv6Settings>\n                        <DhcpEnabled><%= dhcp_ipv6 %></DhcpEnabled>\n                        <Metric>10</Metric>\n                        <RouterDiscoveryEnabled>false</RouterDiscoveryEnabled>\n                    </Ipv6Settings>\n                    <Identifier><%= n.device%></Identifier>\n                    <% if (ipAddress !== 0 || ipv6_ipAddress !== 0 ) \{ %>\n                    <UnicastIpAddresses>\n                        <% if (ipAddress !== 0 ) \{%>\n                        <IpAddress wcm:action=\"add\"wcm:keyValue=\"1\"><%=ipAddress%>/<%= cidr_bits%></IpAddress>\n                        <% \} %>\n                        <% if (ipv6_ipAddress !== 0 ) \{%>\n                        <IpAddress wcm:action=\"add\"wcm:keyValue=\"2\"><%=ipv6_ipAddress%>/<%= ipv6_cidr_bits%></IpAddress>\n                        <% \} %>\n                    </UnicastIpAddresses>\n                    <% \} %>\n                    <% if (gateWay !== 0 || ipv6_gateWay !== 0) \{ %>\n                    <Routes>\n                        <% if (gateWay !== 0) \{ %>\n                        <Route wcm:action=\"add\">\n                            <Identifier>0</Identifier>\n                            <NextHopAddress><%=gateWay%></NextHopAddress>\n                            <Prefix>0.0.0.0/0</Prefix>\n                        </Route>\n                        <% \} %>\n                        <% if (ipv6_gateWay !== 0) \{ %>\n                        <Route wcm:action=\"add\">\n                            <Identifier>2</Identifier>\n                            <NextHopAddress><%=ipv6_gateWay%></NextHopAddress>\n                            <Prefix>0.0.0.0/0</Prefix>\n                        </Route>\n                        <% \} %>\n                    </Routes>\n                    <% \} %>\n                </Interface>\n            <% \}); %>\n            </Interfaces>\n            <% \} %>\n        </component>\n\n    </settings>\n    <cpi:offlineImage cpi:source=\"wim:e:/ws2012install.wim#Windows Server 2016 Standard\" xmlns:cpi=\"urn:schemas-microsoft-com:cpi\" />\n</unattend>\n',
        'system', 1629698788504, 1629698788504);